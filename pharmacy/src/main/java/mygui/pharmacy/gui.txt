package project;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

public class DoctorInventoryApp {
    private static Doctor loggedDoctor;
    private static Inventory inventory = new Inventory();
    private static ManageCustomerDiscount discountManager = new ManageCustomerDiscount();

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> createLoginWindow());
    }

    private static void createLoginWindow() {
        JFrame frame = new JFrame("Login");
        frame.setSize(400, 250);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new GridLayout(4, 2));

        JLabel userLabel = new JLabel("Username:");
        JTextField userField = new JTextField();

        JLabel passLabel = new JLabel("Password:");
        JPasswordField passField = new JPasswordField();

        JButton loginButton = new JButton("Login");
        JLabel statusLabel = new JLabel("", SwingConstants.CENTER);

        loginButton.addActionListener(e -> {
            String username = userField.getText();
            String password = new String(passField.getPassword());
            Login login = new Login(username, password);

            if (login.login()) {
                loggedDoctor = new Doctor(username, username, new ArrayList<>(), inventory);
                frame.dispose();
                createDoctorDashboard();
            } else {
                statusLabel.setText("Invalid login. Try again.");
                statusLabel.setForeground(Color.RED);
            }
        });

        frame.add(userLabel);
        frame.add(userField);
        frame.add(passLabel);
        frame.add(passField);
        frame.add(new JLabel()); // spacer
        frame.add(loginButton);
        frame.add(statusLabel);

        frame.setVisible(true);
    }

    private static void createDoctorDashboard() {
        JFrame frame = new JFrame("Doctor Dashboard");
        frame.setSize(600, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new GridLayout(5, 1));

        JButton viewInventoryButton = new JButton("View Inventory");
        JButton addProductButton = new JButton("Add Product to Inventory");
        JButton updateProductButton = new JButton("Update Product Quantity");
        JButton createOrderButton = new JButton("Create Order");
        JButton viewOrdersButton = new JButton("View Completed Orders");

        viewInventoryButton.addActionListener(e -> showInventory(frame));
        addProductButton.addActionListener(e -> addProductToInventory(frame));
        updateProductButton.addActionListener(e -> updateProductQuantity(frame));
        createOrderButton.addActionListener(e -> createOrder(frame));
        viewOrdersButton.addActionListener(e -> viewCompletedOrders(frame));

        frame.add(viewInventoryButton);
        frame.add(addProductButton);
        frame.add(updateProductButton);
        frame.add(createOrderButton);
        frame.add(viewOrdersButton);

        frame.setVisible(true);
    }

    private static void showInventory(JFrame parentFrame) {
        JTextArea inventoryArea = new JTextArea(15, 50);
        inventoryArea.setEditable(false);

        for (Product product : inventory.getAllProducts().values()) {
            inventoryArea.append(product.getName() + " (ID: " + product.getProductId() + ") - Quantity: "
                    + product.getQuantity() + "\n");
        }

        JOptionPane.showMessageDialog(parentFrame, new JScrollPane(inventoryArea), "Inventory",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private static void addProductToInventory(JFrame parentFrame) {
        JTextField nameField = new JTextField();
        JTextField idField = new JTextField();
        JTextField priceField = new JTextField();
        JTextField quantityField = new JTextField();

        Object[] fields = {
                "Product Name:", nameField,
                "Product ID:", idField,
                "Price:", priceField,
                "Quantity:", quantityField
        };

        int option = JOptionPane.showConfirmDialog(parentFrame, fields, "Add Product", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            String name = nameField.getText();
            String id = idField.getText();
            double price = Double.parseDouble(priceField.getText());
            int quantity = Integer.parseInt(quantityField.getText());

            Product product = new Product(name, id, price, quantity);
            loggedDoctor.addProductToInventory(product);
        }
    }

    private static void updateProductQuantity(JFrame parentFrame) {
        String productId = JOptionPane.showInputDialog(parentFrame, "Enter Product ID:");
        if (productId == null) return;

        String[] options = {"Increase", "Decrease"};
        int choice = JOptionPane.showOptionDialog(parentFrame, "Do you want to increase or decrease quantity?",
                "Update Quantity", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

        if (choice == -1) return;

        boolean increase = (choice == 0);
        String quantityStr = JOptionPane.showInputDialog(parentFrame, "Enter Quantity:");
        if (quantityStr == null) return;

        int quantity = Integer.parseInt(quantityStr);
        loggedDoctor.updateProductQuantity(productId, quantity, increase);
    }

    private static void createOrder(JFrame parentFrame) {
        JTextField customerNameField = new JTextField();
        JTextField customerIdField = new JTextField();
        JTextField phoneField = new JTextField();

        Object[] customerFields = {
                "Customer Name:", customerNameField,
                "Customer ID:", customerIdField,
                "Phone:", phoneField
        };

        int option = JOptionPane.showConfirmDialog(parentFrame, customerFields, "Create Order",
                JOptionPane.OK_CANCEL_OPTION);

        if (option == JOptionPane.OK_OPTION) {
            Customer customer = new Customer(customerNameField.getText(), customerIdField.getText(),
                    phoneField.getText());
            Order order = loggedDoctor.createNewOrder(customer, discountManager);

            JOptionPane.showMessageDialog(parentFrame, "Order Created. Add Products Now.");

            while (true) {
                String productId = JOptionPane.showInputDialog(parentFrame, "Enter Product ID (or Cancel to finish):");
                if (productId == null) break;

                String quantityStr = JOptionPane.showInputDialog(parentFrame, "Enter Quantity:");
                if (quantityStr == null) break;

                int quantity = Integer.parseInt(quantityStr);
                loggedDoctor.addProductToOrder(order, productId, quantity);
            }

            String[] orderOptions = {"Finalize Order", "Cancel Order"};
            int orderChoice = JOptionPane.showOptionDialog(parentFrame, "What do you want to do with this order?",
                    "Order Actions", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, orderOptions,
                    orderOptions[0]);

            if (orderChoice == 0) {
                loggedDoctor.finalizeOrder(order);
            } else if (orderChoice == 1) {
                loggedDoctor.cancelOrder(order);
            }
        }
    }

    private static void viewCompletedOrders(JFrame parentFrame) {
        JTextArea ordersArea = new JTextArea(15, 50);
        ordersArea.setEditable(false);

        for (Order order : loggedDoctor.currentOrders) {
            ordersArea.append("Order for Customer: " + order.getcustomer().getname() + "\n");
            for (Product product : order.getOrderedProducts()) {
                ordersArea.append(" - " + product.getName() + " (Quantity: " + product.getQuantity() + ")\n");
            }
            ordersArea.append("Total Price: " + order.TotalPrice + "\n\n");
        }

        JOptionPane.showMessageDialog(parentFrame, new JScrollPane(ordersArea), "Completed Orders",
                JOptionPane.INFORMATION_MESSAGE);
    }
}
